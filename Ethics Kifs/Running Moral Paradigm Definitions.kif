;; In this file, I'll keep the latest draft of the primary definitions.

;; This is tricky because I'm including both classes and instances.  Maybe I should drop instances for now.
;; Anyway, I wish to include the idea that the moral judgment is of a member of a group
;; Let's add that the agent of the moral judgment is either an inclusive subgroup or a member of the group (with a bit of redundancy!)
(and 
    (refers Ethics ?JUDGE)
    (instance ?JUDGE MoralJudging)
    (instance ?GROUP Group)
    (member ?MEMB ?GROUP)
    (patient ?JUDGE ?BEHAVE)
    (=>
        (instance ?BEHAVE AutonomousAgentProcess)
        (agent ?BEHAVE ?MEMB))
    (=> 
        (subclass ?BEHAVE AutonomousAgentProcess)
        (capability ?BEHAVE agent ?MEMB))
    (agent ?JUDGE ?AGENT)
    (or
        (member ?AGENT ?GROUP)
        (part ?AGENT ?GROUP)))

;; Minimalistically, setting the social context aside:
(and 
    (refers Ethics ?JUDGE)
    (instance ?JUDGE MoralJudging))

;; "Moral nihilism is the view that there are no moral facts." (Ethics: The Fundamentals)
;; There is no moral judging (with behavior and moral judgments) that is a fact.
(and 
    (refers MoralNihilism ?STATE)
    (instance ?STATE Statement)
    (equal ?STATE 
        (not 
            (exists (?JUDGE) 
                (and 
                    (instance ?JUDGE MoralJudging)
                    (result ?JUDGE ?MORALSTATEMENT)
                    (instance ?MORALSTATEMENT Fact))))))

;; "Nothing is morally wrong." (from SEP Moral Skepticism); 
;; technically, this would be a noncognitivist nihilism, I suppose (citing Ethics: The Fundamentals)
;; There does not exist a class of behaviors for which there being an instance is morally bad.
(and 
    (refers MoralNihilism ?STATE)
    (instance ?STATE Statement)
    (equal ?STATE 
        (not 
            (exists (?CBEHAVE) 
                (and 
                    (subclass ?CBEHAVE AutonomousAgentProcess)
                    (modalAttribute (hasInstance ?CBEHAVE) MorallyBad))))))

(and 
    (refers Deontology ?STATE)
    (instance ?STATE Statement)
    (equal ?STATE
        (or
            (exists (?RULE)
                (and 
                    (modalAttribute ?RULE Obligation)
                    (=>
                        (conformsFormula ?BEHAVE ?RULE)
                        (and 
                            (instance ?JUDGE MoralJudging)
                            (result ?JUDGE
                                (modalAttribute ?BEHAVE MorallyGood))))
                    (=>
                        (not 
                            (conformsFormula ?BEHAVE ?RULE))
                        (and 
                            (instance ?JUDGE MoralJudging)
                            (result ?JUDGE
                                (modalAttribute ?BEHAVE MorallyBad))))))
             (exists (?RULE)
                (and 
                    (modalAttribute ?RULE Prohibition)
                    (=> 
                        (conformsFormula ?BEHAVE ?RULE)
                        (and 
                            (instance ?JUDGE MoralJudging)
                            (result ?JUDGE
                                (modalAttribute ?BEHAVE MorallyBad))))))
            (exists (?RULE) 
                (and 
                    (modalAttribute ?RULE Permission)
                    (=> 
                        (and 
                            (conformsFormula ?BEHAVE1 ?RULE)
                            (prevents ?BEHAVE2 ?BEHAVE1)
                            (instance ?BEHAVE2 AutonomousAgentProcess))
                        (and 
                            (instance ?JUDGE MoralJudging)
                            (result ?JUDGE 
                                (modalAttribute ?BEHAVE2 MorallyBad)))))))))  


(and 
    (refers VirtueEthics ?STATE)
    (instance ?STATE Statement)
    (equals ?STATE 
        (<=>
            (and
                (instance ?JUDGE MoralJudging)
                (agent ?JUDGE ?AGENTJ)
                (patient ?JUDGE
                    (modalAttribute ?BEHAVE MorallyGood)))
            (believes ?AGENTJ
                (=>
                    (and 
                        (instance ?DECIDE Deciding)
                        (result ?DECIDE ?BEHAVE)
                        (and 
                            (agent ?DECIDEV ?AGENTV)
                            (instance ?AGENTV VirtuousAgent)
                            (instance ?DECIDEV Deciding)
                            (similarSetsWithBP similarProcesses (DecisionOptionFn ?DECIDE) (DecisionOptionFn ?DECIDEV))))
                    (modalAttribute (result ?DECIDEV ?BEHAVE) Likely))))))

(and 
    (refers VirtueEthics ?STATE)
    (instance ?STATE Statement)
    (equals ?STATE 
        (<=>
            (and
                (instance ?JUDGE MoralJudging)
                (agent ?JUDGE ?AGENTJ)
                (result ?JUDGE
                    (modalAttribute ?BEHAVE MorallyBad)))
            (believes ?AGENTJ
                (=>
                    (and 
                        (instance ?DECIDE Deciding)
                        (result ?DECIDE ?BEHAVE)
                        (and 
                            (agent ?DECIDEV ?AGENTV)
                            (instance ?AGENTV ViciousAgent)
                            (instance ?DECIDEV Deciding)
                            (similarSetsWithBP similarProcesses (DecisionOptionFn ?DECIDE) (DecisionOptionFn ?DECIDEV))))
                    (modalAttribute (result ?DECIDEV ?BEHAVE) Likely))))))

(and
    (refers Utilitarianism ?STATE)
    (instance ?STATE Statement)
    (equals ?STATE
        (<=>
            (and
                (instance ?JUDGE MoralJudging)
                (result ?JUDGE
                    (modalAttribute ?BEHAVE MorallyGood)))
            (and
                (instance ?BEHAVE AutonomousAgentProcess)
                (greaterThan (UtilityFn ?BEHAVE) 0)))))

(and
    (refers Utilitarianism ?STATE)
    (instance ?STATE Statement)
    (equals ?STATE
        (<=>
            (and
                (instance ?JUDGE MoralJudging)
                (result ?JUDGE
                    (modalAttribute ?BEHAVE MorallyBad)))
            (and
                (instance ?BEHAVE AutonomousAgentProcess)
                (lessThan (UtilityFn ?BEHAVE) 0)))))

(and
    (refers Utilitarianism ?STATE)
    (instance ?STATE Statement)
    (equals ?STATE
        (=>
            (and
                (instance ?DECIDE Deciding)
                (result ?DECIDE ?BEHAVE)
                (instance ?BEHAVE AutonomousAgentProcess)
                (forall (?OPTION)
                    (=> 
                        (member ?OPTION (DecisionOptionFn ?DECIDE))
                        (greaterThanOrEqualTo (UtilityFn ?BEHAVE) (UtilityFn ?OPTION)))))
            (and
                (instance ?JUDGE MoralJudging)
                (result ?JUDGE
                    (modalAttribute ?BEHAVE MorallyGood))))))


(and
    (refers Utilitarianism ?STATE)
    (instance ?STATE Statement)
    (equals ?STATE
        (=>
            (and
                (instance ?DECIDE Deciding)
                (result ?DECIDE ?BEHAVE)
                (instance ?BEHAVE AutonomousAgentProcess)           
                (exists (?OPTION)
                    (and
                        (member ?OPTION (DecisionOptionFn ?DECIDE))
                        (greaterThan (UtilityFn ?OPTION) (UtilityFn ?BEHAVE)))))
            (and
                (instance ?JUDGE MoralJudging)
                (result ?JUDGE
                    (modalAttribute ?BEHAVE MorallyBad))))))

(and
    (refers Consequentialism ?STATE)
    (instance ?STATE Statement)
    (equals ?STATE
        (=>
            (and
                (instance ?JUDGE MoralJudging)
                (result ?JUDGE ?CONCLUSION)
                (equals ?CONCLUSION
                    (modalAttribute ?BEHAVE MorallyGood)))
            (exists (?ARGUMENT ?OUTCOME ?PREMISE)
                (and 
                    (instance ?ARGUMENT Argument)
                    (instance ?OUTCOME Outcome)
                    (result ?BEHAVE ?OUTCOME)
                    (premise ?ARGUMENT ?PREMISE)
                    (refers ?PREMISE ?OUTCOME)
                    (conclusion ?ARGUMENT ?CONCLUSION)
                    (agent ?BEHAVE ?AGENT)
                    (forall (?PROP)
                        (and 
                            (=> 
                                (and
                                    (premise ?ARGUMENT ?PROP)
                                    (refers ?PROP ?PHYS)
                                    (instance ?PHYS Physical))
                                (and 
                                    (instance ?PHYS Outcome)
                                    (result ?BEHAVE ?PHYS)))
                            (=> 
                                (premise ?ARGUMENT ?PROP)
                                (forall (?ATT) 
                                    (=> 
                                        (attribute ?AGENT ?ATT)
                                        (not (refers ?PROP ?ATT))))))))))))


