;; Possible bugs in SUMO

;; 1) Fields of Study should be subclasses not instances

(subclass Science FieldOfStudy)
(instance Philosophy FieldOfStudy)

(subclass SocialScience Science)
(instance Physics Science)
(instance NaturalSciences Science)

;; This semes weird.  There are many sub-fields of Philosophy or Physics just as with Science or Social Sciences.
;; "Kantian Philosophy" might be an example of a specific instance of Philosophy (a subclass of FieldOfStudy)

;; 2) Should we be using the instance of a set synonymously with the set's member or element?  

(=>
    (instance ?OBJ
        (PropertyFn ?PERSON))
    (possesses ?PERSON ?OBJ))

(=>
    (possesses ?PERSON ?OBJ)
    (instance ?OBJ
        (PropertyFn ?PERSON)))

;; CausingUnhappiness is inserted as part of Causinghappiness, lol.
;; The context in Mid-level-ontology.kif makes it clear.

(subclass CausingHappiness Process)
(documentation CausingHappiness EnglishLanguage "Any &%Process whose result is that the
patient of the process is happy.")

(=>
  (and
    (instance ?C CausingHappiness)
    (patient ?C ?P))
  (and
    (holdsDuring
      (BeginFn (WhenFn ?C))
    (not
      (attribute ?P Happiness)))
    (holdsDuring
      (EndFn (WhenFn ?C))
    (attribute ?P Happiness))))

(subclass CausingPain CausingUnhappiness)
(documentation CausingPain EnglishLanguage "Any &%Process whose result is that the
patient of the process is in &%Pain.")

(subclass CausingUnhappiness Process)
(documentation CausingUnhappiness EnglishLanguage "Any &%Process whose result is that the
patient of the process is unhappy.")

(=>
  (and
    (instance ?C CausingUnHappiness)
    (patient ?C ?P))
  (and
    (holdsDuring
      (BeginFn (WhenFn ?C))
    (not
      (attribute ?P Unhappiness)))
    (holdsDuring
      (EndFn (WhenFn ?C))
    (attribute ?P Unhappiness))))


;; This should be lower-case.
(format ItalianLanguage Believes "%1 %n{non} crede%p{s} %2")	relations-it.txt 36-36

;; Small suggestion: use result for the proposition that is being judged to be true.
;; Precedent: in Dining.kif 883-896, (patient ?PROC ?OBJ) is used for the object of a contest
;; and (result ?PROC (SubjectiveAttribute...)) is used for the attribute judged to hold.
(=>
    (and
        (instance ?JUDGE Judging)
        (agent ?JUDGE ?AGENT)
        (result ?JUDGE ?PROPOSITION))
    (and
        (holdsDuring
            (BeginFn
                (WhenFn ?JUDGE))
            (not
                (believes ?AGENT ?PROPOSITION)))
        (holdsDuring
            (EndFn
                (WhenFn ?JUDGE))
            (believes ?AGENT ?PROPOSITION))))


;; Contradiction in Deciding (because (partition Abstract Physical))
;; ?RATING would be implied to be an Intentional Process
;; Yet it's also an Attribute.

(=>
    (and
        (instance ?DECIDE Deciding)
        (agent ?DECIDE ?AGENT)
        (patient ?DECIDE ?PROCESS))
    (and
        (instance ?PROCESS IntentionalProcess)
        (agent ?PROCESS ?AGENT)))

(subrelation result patient)
(domain ratingsAgent 1 RatingAttribute)

(=>
    (ratingsAgent ?RATING ?AGENT)
    (exists (?PROCESS)
        (and
            (instance ?PROCESS Deciding)
            (agent ?PROCESS ?AGENT)
            (result ?PROCESS ?RATING))))

;; Another issue is that Deciding courses of action should probably be over the subclasses of processes
;; And thus the patient of Deciding should probably not be an actual instance of a process.
;; We might want something like the following:

(documentation DecidingSubclass EnglishLanguage "The subclass of Selecting where the agent opts for one course of action out of a set of multiple possibilities that are open to him/ her, which are represented as subclasses of Process.")
(subclass DecidingSubclass Selecting)

;; If a subclass of Process is being decided upon by an agent
;; The agent is capable of enacting an instance of the SubProcess
(=>
    (and 
        (instance ?DECIDE DecidingSubclass)
        (agent ?DECIDE ?AGENT)
        (patient ?DECIDE ?SUBPROCESS))
    (capability ?SUBPROCESS agent ?AGENT))

;; Draft 2, being nitpicky
(=>
    (and 
        (instance ?DECIDE DecidingSubclass)
        (agent ?DECIDE ?AGENT)
        (patient ?DECIDE ?SUBPROCESS))
    (believes ?AGENT 
        (capability ?SUBPROCESS agent ?AGENT)))


